#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
MAGENTA='\033[0;35m'
UNDERLINE='\033[4m'
RESET='\033[0m'
BOLD='\033[1m'

NOTA=0

# VERIFICARE COMPILARE SI RULARE PROGRAM

if [[ -z "$1" ]]
then
    echo "Eroare: Te rog specifica numele directorului temei."
    echo "Utilizare: $0 <nume_director_tema>"
    exit 1
fi

TEMA_DIR="$1"

if [[ ! -d "$TEMA_DIR" ]]
then
    echo "Eroare: Directorul specificat '$TEMA_DIR' nu exista."
    exit 1
fi

cd "$TEMA_DIR"

echo " "
echo " "

# Compilare program
g++ -o my_program sources/*.cpp -Iheaders 2> compile_errors.txt

if [[ $? -ne 0 ]]
then
    echo "Eroare: Compilarea a esuat. Verifica erorile de mai jos:"
    cat compile_errors.txt
    echo -e "${BOLD}${UNDERLINE}${RED}ATENTIE!! Tema ta nu se poate verifica deoarece are erori de compilare."
    echo " "
    echo " "
    exit 1
fi

# Rulare program
./my_program > run_output.txt 2> run_errors.txt

if [[ $? -ne 0 ]]
then
    echo "Eroare: Programul a intampinat erori in timpul rularii. Verifica erorile de mai jos:"
    cat run_errors.txt
    echo -e "${BOLD}${UNDERLINE}${RED}ATENTIE!! Tema ta nu se poate verifica deoarece a intampinat erori in timpul rularii."
    echo " "
    echo " "
    exit 1
fi

echo "Succes: Programul a fost compilat si rulat fara erori sau warning-uri."
cat run_output.txt
let NOTA=NOTA+1

rm compile_errors.txt run_output.txt run_errors.txt

echo " "
echo " "

# AFISARE CLASE

cd headers

nr_cls=0
echo "Clasele definite in cadrul temei sunt:"
for file in *.h
do
    echo "In fișierul: $file"
    egrep "^class" $file | cut -f2 -d" "
    echo "-----------------------"
    let nr_cls=nr_cls+1
done

echo "Numarul total de clase:" $nr_cls

echo " "
echo " "

# DIAGRAMA

echo "Diagrama simplificata a claselor:"

for file in *.h
do
    echo "Fișierul: $file"
    line=`egrep "^class" $file`
    class=`echo $line | cut -f2 -d" "`
    inh=`echo $line | cut -f2- -d: | sed 's/^[[:space:]]*//'`
    public=`echo $inh | cut -f1 -d" "`
    result=`echo $inh | sed 's/public\s*//g'`
    echo "  Class: $class"
        if [[ "$public" == "public" || "$public" == "private" ]]
        then
            echo "    Inherits from: $result"
        fi
        
    echo "-----------------------"
done

echo " "
echo " "

# FUNCTIILE DIN FIECARE CLASA

echo "Functiile implementate in fiecare clasa:"
for file in *.h
do
    echo "Fișierul: $file"
    line=`egrep "^class" $file`
    class=`echo $line | cut -f2 -d" "`
    echo "  Class: $class"
    
    func=`cat $file | egrep ".+);$|override;$|0;$"`
    
    echo "$func"

done

echo " "
echo " "

# INTERFETE

echo "In cadrul programului exista urmatoarele interfete:"

nr_int=0
int_list=""
for file in *.h
do
    class=`cat $file | egrep "^class" | cut -f2 -d" "`
    total=`cat $file | egrep ".+;$" | head -n -1 | wc -l`
    virtual=`cat $file | egrep ".+0;$" | wc -l`
    let dif=total-virtual
    if [[ $dif -eq 0 && $virtual -ne 0 ]]
    then
    	int_list+="$class "
    	let nr_int=nr_int+1
    fi
done

echo $int_list

if [[ $nr_int -ne 0 ]]
then
let NOTA=NOTA+1
else
    echo -e "${BOLD}${UNDERLINE}${RED}ATENTIE!! Tema ta nu se poate verifica deoarece nu contine interfete."
    echo " "
    echo " "
    exit 1
fi

echo " "
echo " "

# CLASE ABSTRACTE

echo "In cadrul programului exista urmatoarele clase abstracte:"

nr_abs=0
for c in $int_list
do
virt_list=""
    cc=${c}.h
    while read line
    do
    	virtual=`echo $line | egrep ".+0;$"`
    	if [[ ! -z $virtual ]]
    	then
            clean_line=$(echo "$virtual" | sed 's/virtual //' | sed 's/ = 0//')
    	    virt_list+="$clean_line "
    	fi
    done < $cc
    for file in *.h
    do
    	if [[ $file != $cc ]]
    	then
            ver=`cat $file | egrep "^class" | egrep "$c"`
        if [[ ! -z $ver ]]
        then
            ok=0
            for v in $virt_list
            do
                verr=`cat $file | egrep "$v"`
                if [[ ! -z $verr ]]
                then
                    virt_list=$(echo "$virt_list" | sed 's/$v//g')
                    ok=1
                fi
            done
            if [[ $ok -eq 1 ]]
            then 
            	abs=$(echo $file | sed 's/\.h$//')
            	abs_list+="$abs"
            	let nr_abs=nr_abs+1
            fi
        fi
        fi
    done
done

echo $abs_list

if [[ $nr_int -ne 0 ]]
then
let NOTA=NOTA+1
fi

echo " "
echo " "

# CONSTRUCTORI SI DESTRUCTORI

total_classes=0
classes_with_constructors=0
classes_with_destructors=0

check_constructors_and_destructors() 
{
    local file=$1
    local class_name=$2
    constructor_found=$(egrep "($class_name\(|$class_name\s*\()" "$file")
    destructor_found=$(egrep "(~$class_name\s*\()" "$file")

    let total_classes=total_classes+1

    if [[ ! -z $constructor_found ]]
    then
        let classes_with_constructors=classes_with_constructors+1
    else
        echo "Clasa $class_name din fisierul $file nu are constructori."
    fi

    if [[ ! -z $destructor_found ]]
    then
        let classes_with_destructors=classes_with_destructors+1
    else
        echo "Clasa $class_name din fisierul $file nu are destructori."
    fi
}

for header in *.h
do
    echo "Verificare fisier $header"

    class_names=$(cat $header | egrep "^class" | cut -f2 -d" ")

    for class in $class_names
    do
        check_constructors_and_destructors "$header" "$class"
    done

    echo ""
done

if [[ $total_classes -gt 0 ]]
then
    constructor_percentage=$(echo "scale=2; ($classes_with_constructors / $total_classes) * 100" | bc)
    destructor_percentage=$(echo "scale=2; ($classes_with_destructors / $total_classes) * 100" | bc)

    echo "Numarul total de clase: $total_classes"
    echo "Clase care contin constructori: $classes_with_constructors ($constructor_percentage%)"
    echo "Clase care contin destructori: $classes_with_destructors ($destructor_percentage%)"
fi

if [[ $(echo "$constructor_percentage > 50.00" | bc) -eq 1 && $(echo "$destructor_percentage > 50.00" | bc) -eq 1 ]]
then
    let NOTA=NOTA+1
fi

echo " "
echo " "

# PLAGIAT

cd ../sources

for s1 in *.cpp
do
for s2 in *.cpp
do

file1=$s1
file2=$s2

if [[ $file1 != $file2 ]]
then

if [[ ! -f "$file1" ]]
then
    echo "Fișierul $file1 nu există."
    exit 1
fi

if [[ ! -f "$file2" ]]
then
    echo "Fișierul $file2 nu există."
    exit 1
fi

result=$(diff -q "$file1" "$file2")
found=0

if [[ -z "$result" ]]
then
    found=1
    break
fi

fi
done
done

if [[ $found -eq 1 ]]
then
echo "Există posibilitatea de plagiat."
echo -e "${BOLD}${UNDERLINE}${RED}ATENTIE!! Tema ta nu poate fi verificata deoarece exista posibilitatea de plagiat."
echo " "
echo " "
exit 1
else
echo "Probabil nu există plagiat."
let NOTA=NOTA+1
fi

echo " "
echo " "

# MOSTENIRI SI LANTURI DE DERIVARE

cd ../headers

extract_inheritance() 
{
    local file="$1"
    local class_name=""
    local base_class=""

    while IFS= read -r line
    do
        if [[ $line =~ ^class[[:space:]]+([[:alnum:]]+)[[:space:]]*(:[[:space:]]*public[[:space:]]+([[:alnum:]]+))? ]]
        then
            class_name="${BASH_REMATCH[1]}"
            base_class="${BASH_REMATCH[3]}"

            if [[ -n $base_class ]] 
            then
                echo "$class_name -> $base_class"
            fi
        fi
    done < "$file"
}

declare -a inheritance_list
has_inheritance=0

for header_file in *.h
do
    result=$(extract_inheritance "$header_file")
    if [[ -n $result ]]
    then
        inheritance_list+=("$result")
        has_inheritance=1
    fi
done

print_inheritance_chain() 
{
    local class="$1"
    local indent="$2"
    local level="$3"

    for relation in "${inheritance_list[@]}"
    do
        if [[ $relation == "$class -> "* ]]
        then
            local derived_class="${relation#*-> }"
            echo "${indent}$class -> $derived_class"
            print_inheritance_chain "$derived_class" "$indent    " "$((level + 1))"
        fi
    done

    if [[ $level -ge 3 ]]
    then
        has_long_chain=1
    fi
}

check_inheritance()
{
    local indent=""

    for relation in "${inheritance_list[@]}"
    do
        local base_class="${relation#*-> }"
        local derived_class="${relation% ->*}"
        if [[ ! " ${checked_classes[*]} " =~ " $derived_class " ]]
        then
            echo "Lanț de moștenire care începe cu $derived_class:"
            print_inheritance_chain "$derived_class" "$indent" 1
            echo ""
            checked_classes+=("$derived_class")
        fi
    done
}

declare -a checked_classes

has_long_chain=0

check_inheritance

if [[ $has_long_chain -eq 1 ]]
then
    echo "Există cel puțin un lanț de moștenire cu 3 sau mai multe niveluri."
    let NOTA=NOTA+1
fi

if [[ $has_inheritance -eq 1 ]]
then
    echo "Proiectul conține moșteniri corecte."
    let NOTA=NOTA+1
else
    echo "Proiectul nu conține moșteniri."
fi

echo " "
echo " "

# INCAPSULAREA

check_sections() 
{
    local file="$1"
    local class_name=""
    local private_section_found=false
    local public_section_found=false

    class_name=$(basename "$file" .h)

    if grep -q "private:" "$file"
    then
        private_section_found=true
    fi

    if grep -q "public:" "$file"
    then
        public_section_found=true
    fi

    if [[ "$private_section_found" = true ]] || [[ "$public_section_found" = true ]]
    then
        echo "$class_name respectă incapsularea."
        return 0
    else
        echo "$class_name nu respectă incapsularea."
        return 1
    fi
}

total_classes=0
encapsulation_respected=0

for header_file in *.h
do
    if check_sections "$header_file"
    then
        let encapsulation_respected=encapsulation_respected+1
    fi
    let total_classes=total_classes+1
done

if [[ "$total_classes" -gt 0 ]]
then
    percentage_respected=$(( (encapsulation_respected * 100) / total_classes ))
else
    percentage_respected=0
fi

percentage_not_respected=$(( 100 - percentage_respected ))

echo "Procentul de clase care respectă incapsularea: $percentage_respected%"
echo "Procentul de clase care nu respectă incapsularea: $percentage_not_respected%"

if [[ $percentage_respected -gt 5 ]]
then
let NOTA=NOTA+1
fi

echo " "
echo " "

# MOVE CONSTRUCTOR

move_constructor_found=false

for file in *.h
do
    class_name=`cat $file | egrep "^class" | cut -f2 -d" "`
    if grep -q "$class_name($class_name&&" "$file"
    then
        echo "In fișierul: $file - exista un move constructor."
        move_constructor_found=true
    fi
done

if [[ "$move_constructor_found" = true ]]
then
    echo "Exista cel putin un move constructor in proiect."
    let NOTA=NOTA+1
else
    echo "Nu exista niciun move constructor in proiect."
fi

echo " "
echo " "

# SINGLETON

found=0
for file in *.h
do
    class_name=`cat $file | egrep "^class" | cut -f2 -d" "`
    while read line
    do
       if [[ $line == "private:" ]]
       then
           continue
       fi
       
       cstr1=`echo $line | egrep "$class_name\(\);"`
       cstr2=`echo $line | egrep "$class_name\(.*\);"`
       cstr3=`echo $line | egrep "~$class_name\(\);"`
       
       if [[ -n $cstr1 && -n $cstr2 && -n $cstr3 ]]
       then
           echo "Clasa" $class_name "este SINGLETON."
           found=1
       fi
       
       if [[ $line == "public:" ]]
       then
           break
       fi
    
    done < $file

done

if [[ $found -eq 1 ]]
then
    echo "Exista SINGLETON implementat in cadrul proiectului."
    let NOTA=NOTA+1
else
    echo "Nu exista SINGLETON implementat in cadrul proiectului."
fi

echo " "
echo " "

# CALCULARE NOTA

show_frame() 
{
    echo -e "$1"
}

frame1="Calculare nota: ."
frame2="Calculare nota: .."
frame3="Calculare nota: ..."
frame4="Calculare nota: ...."
frame5="Calculare nota: ....."
frame6="Calculare nota: ......"

frames=("$frame1" "$frame2" "$frame3" "$frame4" "$frame5" "$frame6")

for i in {1..2}
do
    for frame in "${frames[@]}"
    do
        show_frame "$frame"
        sleep 0.5
    done
done

echo " "
echo " "

if [[ $NOTA -gt 4 ]]
then
echo -e "${BOLD}${UNDERLINE}${MAGENTA}FELICITARI!! In urma verificarii temei, ai obtinut nota:"
echo -e "\xf0\x9f\x98\x8a"
echo ""
echo -e "${GREEN}███████████████████████████${RESET}"
echo -e "${GREEN}██  ${RESET}       NOTA: $NOTA       ${GREEN}██${RESET}"
echo -e "${GREEN}███████████████████████████${RESET}"
else
echo -e "${BOLD}${UNDERLINE}${MAGENTA}In urma verificarii temei, ai obtinut nota:"
echo -e "\xf0\x9f\x98\xa2"
echo ""
echo -e "${RED}███████████████████████████${RESET}"
echo -e "${RED}██  ${RESET}       NOTA: $NOTA       ${RED}██${RESET}"
echo -e "${RED}███████████████████████████${RESET}"
fi
  
echo " "
echo " "
